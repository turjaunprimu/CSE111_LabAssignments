LabAssignment07_Inheritance_and_Overriding
Course Code : CSE111
Course Title : Programming Language II
Topic : Inheritance and Overriding
Name : Turjaun Jannat Primu
Student ID : 24301064
Semester : Fall 2024
















//Task_01




public class BBAStudent extends Student
{
  public BBAStudent()
  {
    super.setName("Default");
    super.setDepartment("BBA");
  }
  
  public BBAStudent(String name)
  {
    super.setName(name);
    super.setDepartment("BBA");
  }
}






//Task_02




public class CheckingAccount extends Account
{
  public static int count;
  
  public CheckingAccount()
  {
    super(0.0);
    count++;
  }
  
  public CheckingAccount(double balance)
  {
    super(balance);
    count++;
  }
}













//Task_03






//Dog extends Animal


public class Dog extends Animal
{
  public String breed;
  
  public Dog(String name, int age, String color, String breed)
  {
    super(name, age, color);
    this.breed=breed;
  }
  
  public void makeSound()
  {
    System.out.println(color + " color " + name+ " is barking");
  }
  
  public String info()
  {
    return super.info()+ "Breed: " + breed;
  }
}








//Cat extends Animal


public class Cat extends Animal
{
  public String breed;
  
  public Cat(String name, int age, String color, String breed)
  {
    super(name, age, color);
    this.breed=breed;
  }
  
  public void makeSound()
  {
    System.out.println(color + " color " + name+ " is mewing");
  }
  
  public String info()
  {
    return super.info()+ "Breed: " + breed;
  }
}













//Task_04






public class Vehicle2010 extends Vehicle
{
  public void moveLowerLeft()
  {
    moveDown();
    moveLeft();
  }
  
  public void moveUpperRight()
  {
    moveUp();
    moveRight();
  }
  
  public void moveUpperLeft()
  {
    moveUp();
    moveLeft();
  }
  
  public void moveLowerRight()
  {
    moveDown();
    moveRight();
  }
  
  public String toString()
  {
    String s="(" + x+ ", " + y+")";
    return s;
  }
}










//Task_05




public class ComplexNumber extends RealNumber
{
  public double imaginaryValue;
  
  public ComplexNumber()
  {
    super(1.0);
    imaginaryValue=1.0;
  }
  
  public ComplexNumber(double real, double image)
  {
    super(real);
    imaginaryValue=image;
  }
  
  public String toString()
  {
    String s=super.toString()+ "\nImaginaryPart: " + imaginaryValue;
    return s;
  }
}












//Task_06










//Manager extends Employee


public class Manager extends Employee
{
  public double bonus;
  public double bonusSalary;
  
  public Manager(String name, double baseSalary, int hoursWorked, double bonus)
  {
    super(name, baseSalary, hoursWorked);
    this.bonus=bonus;
  }
  
  public void calculateSalary()
  {
    if(getHoursWorked()>40)
    {
      bonusSalary=getBaseSalary()+(getBaseSalary()*(bonus/100.0));
    }
    
    else
    {
      bonusSalary=getBaseSalary();
    }
  }
  
  public void requestIncrement(double increment)
  {
    if(getHoursWorked()>100)
    {
      setBaseSalary(getBaseSalary()+increment);
      System.out.println("$" + increment+ " Increment approved.");
    }
    
    else if(getHoursWorked()>80 && getHoursWorked()<=100)
    {
      setBaseSalary(getBaseSalary()+(0.5*increment));
      System.out.println("$" + (int)(0.5*increment)+ " Increment approved.");
    }
    
    else
    {
      System.out.println("Increment denied.");
    }
  }
  
  public void displayInfo()
  {
    super.displayInfo();
    System.out.println("Bonus: " + bonus+ " %");
    System.out.println("Final Salary: $" + bonusSalary);
  }
}




//Developer extends Employee



public class Developer extends Employee
{
  public String language;
  public double bonusSalary;
  
  public Developer(String name, double baseSalary, int hoursWorked, String language)
  {
    super(name, baseSalary, hoursWorked);
    this.language=language;
  }
  
  public void calculateSalary()
  {
    if(language.equals("Java"))
    {
      bonusSalary=getBaseSalary()+700;
    }
    
    else
    {
      bonusSalary=getBaseSalary();
    }
  }
  
  public void displayInfo()
  {
    super.displayInfo();
    System.out.println("Language: " + language);
    System.out.println("Final Salary: $" + bonusSalary);
  }
}







//Task_07






public class CinemexTicket extends MovieTicket
{
  private static int totalTickets;
  
  public String id;
  public String genre;
  public String seatType;
  public boolean status;
  
  
  public CinemexTicket(String movie, String showtime, String genre, String date)
  {
    super(movie, date, showtime, 300.0);
    this.genre=genre;
    this.seatType="Regular";
    setTotalTickets(++totalTickets);
    this.id=movie+"-"+seatType.charAt(0)+"-"+CinemexTicket.totalTickets;
  }
  
  public CinemexTicket(String movie, String showtime, String genre, String date, String seatType)
  {
    super(movie, date, showtime, 0);
    this.seatType=seatType;
    for(int i=0; i<seatTypes.length; i++)
    {
      if(seatType.equals(seatTypes[i]))
      {
        setPrice(seatPrices[i]);
      }
    }
    this.genre=genre;
    setTotalTickets(++totalTickets);
    this.id=movie+"-"+seatType.charAt(0)+"-"+CinemexTicket.totalTickets;
  }
  
  public static void setTotalTickets(int totalTickets)
  {
    CinemexTicket.totalTickets=totalTickets;
  }
  
  public static int getTotalTickets()
  {
    return CinemexTicket.totalTickets;
  }
  
  public String toString()
  {
    if(status)
    {
      String s="Ticket ID: " + id + "\n" + super.toString()+ "\nGenre: " + genre+ "\nSeat Type: " + seatType+ "\nPrice(tk): "+ getPrice()+ "\nStatus: Paid";
      return s;
    }
    else
    {
      String s="Ticket ID: " + id + "\n" + super.toString()+ "\nGenre: " + genre+ "\nSeat Type: " + seatType+ "\nPrice(tk): "+ getPrice()+ "\nStatus: Not Paid";
      return s;
    }
  }
  
  public String confirmPayment()
  {
    if(!status)
    {
      status=true;
      return "Payment Successful.";
    }
    
    else
    {
      return "Ticket price is already paid!";
    }
  }
  
  public void calculateTicketPrice()
  {
    String [] parts=showtime.split(":");
    int hour=Integer.parseInt(parts[0]);
    int minute=Integer.parseInt(parts[1]);
    System.out.println("Ticket price is calculated successfully.");
    
    if((hour>=18 && minute>=0))
    {
      if((hour==23 && minute==0))
      {
        setPrice(getPrice()+(getPrice()*(15/100.0)));
      }
      
      else if((hour<23 && minute>=0))
      {
        setPrice(getPrice()+(getPrice()*(15/100.0)));
      }
    }
  }
}














//Task_08






//KKTea extends Tea



public class KKTea extends Tea
{
  public int weight;
  public int teaBags;
  
  public static int totalSales;
  public static int regularTea;
  public static int flavouredTea;
  
  public KKTea(int price, int teaBags)
  {
    super("KK Regular Tea", price);
    this.teaBags=teaBags;
    this.weight=teaBags*2;
  }
  
  public void productDetail()
  {
    super.productDetail();
    System.out.println("Weight: " + this.weight + ", Tea Bags: " + this.teaBags);
  }
  
  public static void totalSales()
  {
    System.out.println("Total Sales: " + KKTea.totalSales);
    System.out.println("KK Regular Tea: " + KKTea.regularTea);
    
    if(KKTea.flavouredTea!=0)
    {
      System.out.println("KK Flavoured Tea: " + KKTea.flavouredTea);
    }
  }
  
  public static void updateSoldStatusRegular(KKTea t)
  {
    KKTea.totalSales++;
    KKTea.regularTea++;
    t.status=true;
  }
}




//KKFlavouredTea extends KKTea



public class KKFlavouredTea extends KKTea
{
  
  public KKFlavouredTea(String name, int price, int teaBags)
  {
    super(price, teaBags);
    super.name="KK " + name+ " Tea";
  }
  
  public static void updateSoldStatusFlavoured(KKFlavouredTea t)
  {
    KKFlavouredTea.totalSales++;
    KKTea.flavouredTea++;
    t.status=true;
  }
}
